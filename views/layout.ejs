<!DOCTYPE html>
<html  class="bootstrap-admin-vertical-centered">
  <head>
    <title>BD Games</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!-- Custom styles -->
    <style type="text/css">
        .alert{
            margin: 0 auto 20px;
        }
    </style>

            <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
            <!--[if lt IE 9]>
               <script type="text/javascript" src="js/html5shiv.js"></script>
               <script type="text/javascript" src="js/respond.min.js"></script>
            <![endif]-->
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/DT_bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap-admin-theme-change-size.css">
    <link rel="stylesheet" href="/styles/bootstrap-admin-theme-small.css">
    <link rel="stylesheet" href="/styles/bootstrap-admin-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap-error-page.css">
    <link rel="stylesheet" href="/styles/bootstrap-small.css">
    <link rel="stylesheet" href="/styles/bootstrap-switch-small.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme-switch.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme-switch.min.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/datepicker.fixes.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/uniform.default.fixes.css">
    <!--STYLES END-->
  </head>

  <body class="bootstrap-admin-without-padding">
     <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

     <script type="text/javascript" src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
     <script type="text/javascript" src="/js/bootstrap.min.js"></script>
     <script type="text/javascript">
         $(function() {
             // Setting focus
             $('input[name="username"]').focus();

             // Setting width of the alert box
             var alert = $('.alert');
             var formWidth = $('.bootstrap-admin-login-form').innerWidth();
             var alertPadding = parseInt($('.alert').css('padding'));

             if (isNaN(alertPadding)) {
                 alertPadding = parseInt($(alert).css('padding-left'));
             }

             $('.alert').width(formWidth - 2 * alertPadding);
         });
     </script>
  </body>
</html>
